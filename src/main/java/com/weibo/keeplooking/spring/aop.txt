Aspect-Oriented Programming (AOP) complements Object-Oriented Programming (OOP) by providing
another way of thinking about program structure. The key unit of modularity in OOP is the class, whereas
in AOP the unit of modularity is the aspect. Aspects enable the modularization of concerns such as
transaction management that cut across multiple types and objects. (Such concerns are often termed
crosscutting concerns in AOP literature.)

AOP is used in the Spring Framework to...
• ... provide declarative enterprise services, especially as a replacement for EJB declarative services. The
most important such service is declarative transaction management.
• ... allow users to implement custom aspects, complementing their use of OOP with AOP.

AOP concepts
Let us begin by defining some central AOP concepts and terminology. These terms are not
Spring-specific... unfortunately, AOP terminology is not particularly intuitive; however, it would be even
more confusing if Spring used its own terminology.
• Aspect: a modularization of a concern that cuts across multiple classes. Transaction management is a
Spring Framework
3.0 Reference Documentation 187
good example of a crosscutting concern in enterprise Java applications. In Spring AOP, aspects are
implemented using regular classes (the schema-based approach) or regular classes annotated with the
@Aspect annotation (the @AspectJ style).
• Join point: a point during the execution of a program, such as the execution of a method or the
handling of an exception. In Spring AOP, a join point always represents a method execution.
• Advice: action taken by an aspect at a particular join point. Different types of advice include "around,"
"before" and "after" advice. (Advice types are discussed below.) Many AOP frameworks, including
Spring, model an advice as an interceptor, maintaining a chain of interceptors around the join point.
• Pointcut: a predicate that matches join points. Advice is associated with a pointcut expression and runs
at any join point matched by the pointcut (for example, the execution of a method with a certain name).
The concept of join points as matched by pointcut expressions is central to AOP, and Spring uses the
AspectJ pointcut expression language by default.
• Introduction: declaring additional methods or fields on behalf of a type. Spring AOP allows you to
introduce new interfaces (and a corresponding implementation) to any advised object. For example,
you could use an introduction to make a bean implement an IsModified interface, to simplify
caching. (An introduction is known as an inter-type declaration in the AspectJ community.)
• Target object: object being advised by one or more aspects. Also referred to as the advised object.
Since Spring AOP is implemented using runtime proxies, this object will always be a proxied object.
• AOP proxy: an object created by the AOP framework in order to implement the aspect contracts
(advise method executions and so on). In the Spring Framework, an AOP proxy will be a JDK dynamic
proxy or a CGLIB proxy.
• Weaving: linking aspects with other application types or objects to create an advised object. This can be
done at compile time (using the AspectJ compiler, for example), load time, or at runtime. Spring AOP,
like other pure Java AOP frameworks, performs weaving at runtime.
Types of advice:
• Before advice: Advice that executes before a join point, but which does not have the ability to prevent
execution flow proceeding to the join point (unless it throws an exception).
• After returning advice: Advice to be executed after a join point completes normally: for example, if a
method returns without throwing an exception.
• After throwing advice: Advice to be executed if a method exits by throwing an exception.
• After (finally) advice: Advice to be executed regardless of the means by which a join point exits
(normal or exceptional return).
• Around advice: Advice that surrounds a join point such as a method invocation. This is the most
powerful kind of advice. Around advice can perform custom behavior before and after the method
invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the
advised method execution by returning its own return value or throwing an exception.
Around advice is the most general kind of advice. Since Spring AOP, like AspectJ, provides a full range
of advice types, we recommend that you use the least powerful advice type that can implement the
required behavior. For example, if you need only to update a cache with the return value of a method, you
are better off implementing an after returning advice than an around advice, although an around advice
can accomplish the same thing. Using the most specific advice type provides a simpler programming
model with less potential for errors. For example, you do not need to invoke the proceed() method on
the JoinPoint used for around advice, and hence cannot fail to invoke it.

The concept of join points, matched by pointcuts, is the key to AOP which distinguishes it from older
technologies offering only interception. Pointcuts enable advice to be targeted independently of the
Object-Oriented hierarchy. For example, an around advice providing declarative transaction management
can be applied to a set of methods spanning multiple objects (such as all business operations in the service
layer).



Spring AOP capabilities and goals
Spring AOP is implemented in pure Java. There is no need for a special compilation process. Spring AOP
does not need to control the class loader hierarchy, and is thus suitable for use in a Servlet container or
application server.
Spring AOP currently supports only method execution join points (advising the execution of methods on
Spring beans). Field interception is not implemented, although support for field interception could be
added without breaking the core Spring AOP APIs. If you need to advise field access and update join
points, consider a language such as AspectJ.
Spring AOP's approach to AOP differs from that of most other AOP frameworks. The aim is not to
provide the most complete AOP implementation (although Spring AOP is quite capable); it is rather to
provide a close integration between AOP implementation and Spring IoC to help solve common problems
in enterprise applications.
Thus, for example, the Spring Framework's AOP functionality is normally used in conjunction with the
Spring IoC container. Aspects are configured using normal bean definition syntax (although this allows
powerful "autoproxying" capabilities): this is a crucial difference from other AOP implementations. There
are some things you cannot do easily or efficiently with Spring AOP, such as advise very fine-grained
objects (such as domain objects typically): AspectJ is the best choice in such cases. However, our
experience is that Spring AOP provides an excellent solution to most problems in enterprise Java
applications that are amenable to AOP.

