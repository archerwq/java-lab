http://hc.apache.org/httpcomponents-client-ga/
http://hc.apache.org/httpcomponents-client-ga/tutorial/pdf/httpclient-tutorial.pdf

# HttpClient:
- Client-side HTTP transport library based on HttpCore
- Based on classic (blocking) I/O

# Connection persistence
The process of establishing a connection from one host to another is quite complex and involves
multiple packet exchanges between two endpoints, which can be quite time consuming. The overhead
of connection handshaking can be significant, especially for small HTTP messages. One can achieve
a much higher data throughput if open connections can be re-used to execute multiple requests.


# Managed connections and connection managers
HTTP connections are complex, stateful, thread-unsafe objects which need to be properly managed to
function correctly. HTTP connections can only be used by one execution thread at a time. HttpClient
employs a special entity to manage access to HTTP connections called HTTP connection manager
and represented by the HttpClientConnectionManager interface. The purpose of an HTTP connection
manager is to serve as a factory for new HTTP connections, to manage life cycle of persistent
connections and to synchronize access to persistent connections making sure that only one thread can
have access to a connection at a time. Internally HTTP connection managers work with instances of
ManagedHttpClientConnection acting as a proxy for a real connection that manages connection state
and controls execution of I/O operations. If a managed connection is released or get explicitly closed
by its consumer the underlying connection gets detached from its proxy and is returned back to the
manager. Even though the service consumer still holds a reference to the proxy instance, it is no longer
able to execute any I/O operations or change the state of the real connection either intentionally or
unintentionally.


# Connection keep alive strategy
The HTTP specification does not specify how long a persistent connection may be and should be kept
alive. Some HTTP servers use a non-standard Keep-Alive header to communicate to the client the
period of time in seconds they intend to keep the connection alive on the server side. HttpClient makes
use of this information if available. If the Keep-Alive header is not present in the response, HttpClient
assumes the connection can be kept alive indefinitely. However, many HTTP servers in general use
are configured to drop persistent connections after a certain period of inactivity in order to conserve
system resources, quite often without informing the client. In case the default strategy turns out to be
too optimistic, one may want to provide a custom keep-alive strategy.


# Connection socket factories
HTTP connections make use of a java.net.Socket object internally to handle transmission of data
across the wire. However they rely on the ConnectionSocketFactory interface to create, initialize
and connect sockets. This enables the users of HttpClient to provide application specific socket
initialization code at runtime. PlainConnectionSocketFactory is the default factory for creating and
initializing plain (unencrypted) sockets.

Custom connection socket factories can be associated with a particular protocol scheme as as HTTP
or HTTPS and then used to create a custom connection manager.

HttpClient makes use of SSLConnectionSocketFactory to create SSL connections.
SSLConnectionSocketFactory allows for a high degree of customization. It can take an instance of
javax.net.ssl.SSLContext as a parameter and use it to create custom configured SSL connections.
